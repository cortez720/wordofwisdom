// Code generated by MockGen. DO NOT EDIT.
// Source: ./challenge_handler.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/challenge_handler_mock.go -source=./challenge_handler.go -package=handler
//

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockquoteService is a mock of quoteService interface.
type MockquoteService struct {
	ctrl     *gomock.Controller
	recorder *MockquoteServiceMockRecorder
}

// MockquoteServiceMockRecorder is the mock recorder for MockquoteService.
type MockquoteServiceMockRecorder struct {
	mock *MockquoteService
}

// NewMockquoteService creates a new mock instance.
func NewMockquoteService(ctrl *gomock.Controller) *MockquoteService {
	mock := &MockquoteService{ctrl: ctrl}
	mock.recorder = &MockquoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockquoteService) EXPECT() *MockquoteServiceMockRecorder {
	return m.recorder
}

// GetWordOfWisdom mocks base method.
func (m *MockquoteService) GetWordOfWisdom(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWordOfWisdom", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWordOfWisdom indicates an expected call of GetWordOfWisdom.
func (mr *MockquoteServiceMockRecorder) GetWordOfWisdom(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWordOfWisdom", reflect.TypeOf((*MockquoteService)(nil).GetWordOfWisdom), ctx)
}

// Mockpow is a mock of pow interface.
type Mockpow struct {
	ctrl     *gomock.Controller
	recorder *MockpowMockRecorder
}

// MockpowMockRecorder is the mock recorder for Mockpow.
type MockpowMockRecorder struct {
	mock *Mockpow
}

// NewMockpow creates a new mock instance.
func NewMockpow(ctrl *gomock.Controller) *Mockpow {
	mock := &Mockpow{ctrl: ctrl}
	mock.recorder = &MockpowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockpow) EXPECT() *MockpowMockRecorder {
	return m.recorder
}

// Challenge mocks base method.
func (m *Mockpow) Challenge() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Challenge")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Challenge indicates an expected call of Challenge.
func (mr *MockpowMockRecorder) Challenge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Challenge", reflect.TypeOf((*Mockpow)(nil).Challenge))
}

// Verify mocks base method.
func (m *Mockpow) Verify(challenge, solution []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", challenge, solution)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockpowMockRecorder) Verify(challenge, solution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*Mockpow)(nil).Verify), challenge, solution)
}
