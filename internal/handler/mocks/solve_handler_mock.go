// Code generated by MockGen. DO NOT EDIT.
// Source: ./solve_handler.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/solve_handler_mock.go -source=./solve_handler.go -package=handler
//

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSolverService is a mock of SolverService interface.
type MockSolverService struct {
	ctrl     *gomock.Controller
	recorder *MockSolverServiceMockRecorder
}

// MockSolverServiceMockRecorder is the mock recorder for MockSolverService.
type MockSolverServiceMockRecorder struct {
	mock *MockSolverService
}

// NewMockSolverService creates a new mock instance.
func NewMockSolverService(ctrl *gomock.Controller) *MockSolverService {
	mock := &MockSolverService{ctrl: ctrl}
	mock.recorder = &MockSolverServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSolverService) EXPECT() *MockSolverServiceMockRecorder {
	return m.recorder
}

// Solve mocks base method.
func (m *MockSolverService) Solve() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Solve")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Solve indicates an expected call of Solve.
func (mr *MockSolverServiceMockRecorder) Solve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Solve", reflect.TypeOf((*MockSolverService)(nil).Solve))
}
